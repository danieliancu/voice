import { createContext, useContext, useState, useEffect } from "react";

// Mapping pentru coduri recunoscute de SpeechRecognition & SpeechSynthesis
const langVoices = {
  en: "en-US", // English
  fr: "fr-FR", // French
  de: "de-DE", // German
  ro: "ro-RO", // Romanian
};

const langNames = {
  en: "English",
  fr: "FranÃ§ais",
  de: "Deutsch",
  ro: "RomÃ¢nÄƒ",
};

// Intro messages per language
const introMessages = {
  en: "Hello! Iâ€™m your English correction assistant. Just tap the Talk or Write button below and Iâ€™ll help you correct your sentences.",
  fr: "Bonjour ! Je suis votre assistant de correction en franÃ§ais. Appuyez sur le bouton Parler ou Ã‰crire ci-dessous et je vous aiderai Ã  corriger vos phrases.",
  de: "Hallo! Ich bin Ihr deutscher Korrekturassistent. Tippen Sie unten auf Sprechen oder Schreiben und ich helfe Ihnen, Ihre SÃ¤tze zu korrigieren.",
  ro: "Salut! Sunt asistentul tÄƒu de corectare Ã®n limba romÃ¢nÄƒ. ApasÄƒ butonul VorbeÈ™te sau Scrie de mai jos È™i te voi ajuta sÄƒ Ã®È›i corectezi propoziÈ›iile."
};

// Button labels per language
const buttonLabels = {
  en: { 
    talk: "Talk", 
    stop: "Stop", 
    write: "Write", 
    learn: "Learn", 
    placeholder: "Type a message...",
    corrections: "Corrections",
    alternative: "Natural alternative"
  },
  fr: { 
    talk: "Parler", 
    stop: "ArrÃªter", 
    write: "Ã‰crire", 
    learn: "Apprendre", 
    placeholder: "Ã‰crivez un message...",
    corrections: "Corrections",
    alternative: "Alternative naturelle"
  },
  de: { 
    talk: "Sprechen", 
    stop: "Stopp", 
    write: "Schreiben", 
    learn: "Lernen", 
    placeholder: "Nachricht eingeben...",
    corrections: "Korrekturen",
    alternative: "NatÃ¼rlichere Alternative"
  },
  ro: { 
    talk: "VorbeÈ™te", 
    stop: "OpreÈ™te", 
    write: "Scrie", 
    learn: "ÃŽnvaÈ›Äƒ", 
    placeholder: "Scrie un mesaj...",
    corrections: "Corecturi",
    alternative: "VariantÄƒ naturalÄƒ"
  }
};


// âœ… Lista de limbi (ca sÄƒ nu mai fie hardcode Ã®n Navbar)
export const availableLanguages = Object.keys(langNames).map((code) => ({
  code,
  label: langNames[code],
}));

const LanguageContext = createContext();

export function LanguageProvider({ children }) {
  const [language, setLanguage] = useState("en"); // default English

  // ðŸ”¹ restoreazÄƒ limba din localStorage
  useEffect(() => {
    const saved = localStorage.getItem("appLanguage");
    if (saved && langVoices[saved]) {
      setLanguage(saved);
    }
  }, []);

  // ðŸ”¹ salveazÄƒ limba Ã®n localStorage cÃ¢nd se schimbÄƒ
  useEffect(() => {
    localStorage.setItem("appLanguage", language);
  }, [language]);

  return (
    <LanguageContext.Provider
      value={{
        language,
        setLanguage,
        voiceCode: langVoices[language] || "en-US", // ðŸ‘ˆ pentru STT È™i TTS
        languageName: langNames[language] || "English", // ðŸ‘ˆ pentru UI & mesaje
        introMessage: introMessages[language] || introMessages.en,
        labels: buttonLabels[language] || buttonLabels.en,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  return useContext(LanguageContext);
}
